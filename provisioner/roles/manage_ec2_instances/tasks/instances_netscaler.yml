##############f5 node##############
# - name: find ami for Netscaler (Netscaler MODE)
#   ec2_ami_facts:
#     region: "{{ ec2_region }}"
#     #owners: "{{ ec2_instance_types.netscalernode.owners }}"
#     filters:
#       name: "{{ ec2_instance_types.netscalernode.filter }}"
#       architecture: "{{ ec2_instance_types.netscalernode.architecture }}"
#   register: amis

# - name: save ami for Netscaler (Netscaler MODE)
#   set_fact:
#     netscaler_ami: >
#       {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for Netscaler node (Netscaler MODE)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    # instance_type: "{{ ec2_instance_types.netscalernode.size }}"
    instance_type: m4.xlarge
    image: ami-1172076e
    region: "{{ ec2_region }}"
    count: 1
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: netscaler_output

- name: Ensure tags are present for Netscaler node (Netscaler MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-Netscaler-LB"
      Workshop: "{{ec2_name_prefix}}"
  with_indexed_items:
    - "{{ netscaler_output.instance_ids }}"
  when: netscaler_output.instance_ids is not none

- name: find ami for host1 & host2 (Netscaler MODE)
  ec2_ami_facts:
    region: "{{ ec2_region }}"
    owners: "{{ ec2_instance_types.rhel7.owners }}"
    filters:
      name: "{{ ec2_instance_types.rhel7.filter }}"
      architecture: "{{ ec2_instance_types.rhel7.architecture }}"
  register: amis

- name: save ami for host1 & host2 (Netscaler MODE)
  set_fact:
    host1_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create EC2 instances for host1 node in VPC (Netscaler MODE)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types.rhel7.size }}"
    image: "{{ host1_ami.image_id }}"
    region: "{{ ec2_region }}"
    count: 1
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: host1_output

- name: Ensure tags are present for host1 node (Netscaler MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-Netscaler-host1"
      Workshop: "{{ec2_name_prefix}}"
  with_indexed_items:
    - "{{ host1_output.instance_ids }}"
  when: host1_output.instance_ids is not none

- name: Create EC2 instances for host2 node in VPC (Netscaler MODE)
  ec2:
    assign_public_ip: yes
    key_name: "{{ ec2_name_prefix }}-key"
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_types.rhel7.size }}"
    image: "{{ host1_ami.image_id }}"
    region: "{{ ec2_region }}"
    count: 1
    wait: "{{ ec2_wait }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
  register: host2_output

- name: Ensure tags are present for host2 node (Netscaler MODE)
  ec2_tag:
    region: "{{ ec2_region }}"
    resource: "{{item.1}}"
    state: present
    tags:
      Name: "{{ ec2_name_prefix }}-Netscaler-host2"
      Workshop: "{{ec2_name_prefix}}"
  with_indexed_items:
    - "{{ host2_output.instance_ids }}"
  when: host2_output.instance_ids is not none

############## eni check ##############

- name: grab all network interfaces for VPC 1 (Netscaler MODE)
  ec2_eni_facts:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id}}"
  register: eni_facts_1

- name: Disable Source/Dest check on instance {{ec2_vpc_id}} (Netscaler MODE)
  ec2_eni:
    eni_id: "{{ item['network_interface_id'] }}"
    region: "{{ ec2_region }}"
    source_dest_check: false
  with_items:
    - "{{eni_facts_1['network_interfaces']}}"
